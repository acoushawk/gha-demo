global:
  # The smarthost and SMTP sender used for mail notifications.
  smtp_smarthost: 'localhost:25'
  smtp_from: 'alertmanager@example.org'

# The root route on which each incoming alert enters.
route:
  # The root route must not have any matchers as it is the entry point for
  # all alerts. It needs to have a receiver configured so alerts that do not
  # match any of the sub-routes are sent to someone.
  receiver: slack

  # The labels by which incoming alerts are grouped together. For example,
  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
  # be batched into a single group.
  group_by: ['customer', 'env', 'alertname']

  # When a new group of alerts is created by an incoming alert, wait at
  # least 'group_wait' to send the initial notification.
  # This way ensures that you get multiple alerts for the same group that start
  # firing shortly after another are batched together on the first
  # notification.
  group_wait: 15s

  # When the first notification was sent, wait 'group_interval' to send a batch
  # of new alerts that started firing for that group.
  group_interval: 1m

  # If an alert has successfully been sent, wait 'repeat_interval' to
  # resend them.
  repeat_interval: 3h

  routes:
    - match:
        severity: 's1'
      receiver: pagerduty_high
      continue: false

      routes:
        - match_re:
            env: .*(st(g|ag(e|ing))|qa|dev|perf).*
          receiver: pagerduty_low
        - match:
            env: 'infra'
          routes: 
            - match_re:
                cluster: .*(prd|prod).*
              receiver: pagerduty_high
          receiver: pagerduty_low

    - match:
        severity: 's2'
      receiver: pagerduty_low
      continue: false

# Inhibition rules allow to mute a set of alerts given that another alert is
# firing.
# We use this to mute any warning-level notifications if the same alert is
# already critical.
inhibit_rules:
  - source_match:
      severity: s1
    target_match:
      severity: s2
    # Apply inhibition if the alertname is the same.
    equal: ['alertname']
  - source_match:
      severity: s1
    target_match:
      severity: s3
    # Apply inhibition if the alertname is the same.
    equal: ['alertname']

receivers:
  - name: 'slack'
    slack_configs:
      - send_resolved: true
        api_url: 'https://hooks.slack.com/services/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'
        channel: '#cloud-ops-alerts'
        title: '{{ if ne .Status "firing" }}[{{ .Status | toUpper }}]{{ end }} {{ .CommonAnnotations.summary }}'
        text: >-
          {{ range .Alerts }}
              Summary: {{ .Annotations.summary }}
              Description: {{ .Annotations.description }}
              Details:
              {{ range .Labels.SortedPairs }} - {{ .Name }} = {{ .Value }}
              {{ end }}
          {{ end }}

  - name: 'pagerduty_high'
    pagerduty_configs:
      - service_key: 'c4232d448a3a485e9776c6e2477f9d95'
        description: '{{ .CommonAnnotations.summary }}'
        client: 'Alertmanager'
        client_url: '{{ .CommonAnnotations.runbook }}'
        details: { note: '{{ .CommonAnnotations.description }}' }
        send_resolved: true

  - name: 'pagerduty_low'
    pagerduty_configs:
      - service_key: '2ce99045481c48d08d9fb91a48499a68'
        description: '{{ .CommonAnnotations.summary }}'
        client: 'Alertmanager'
        client_url: '{{ .CommonAnnotations.runbook }}'
        details: { note: '{{ .CommonAnnotations.description }}' }
        send_resolved: true
